Basic Rules
===========
1. Review the questions in this file. Reply back via email with an estimated
   delivery date.
2. Answer each of the questions below.
3. Add your answer to each question to this file, in-line.
4. Send the final file back for review.
5. Bonus points if you add this initial file to your public git repo and share
   that repo with us so we can see how your answers progressed.
6. You may use external sources to help answer the questions (i.e. Google, etc),
   but you should always cite your sources in your comments. Learning from
   others is good. Plagiarism is bad.


Developer Test
==============

1.  What editor will you use to edit this file, and why?

Atom. This is my default file editor. It is one of the best cross platform editors
and provides syntax highlighting for most programming languages.

2.  Some of the questions will ask for a solution in the language of
    your choice.  What language(s) will you choose, and why?

C#. This is my favorite programming language. It is a general purpose OOPS language
and is very easy to use.

The second language that I will use is Objective-C.

3.  Explain the difference between testing and debugging.



4.  Consider a user querying a search engine.  Describe, in as much
    detail as you like, what happens between the user clicking the
    "submit" button and the display of the results.

The two tables below describe relationships between employees,
managers, and departments (the columns employee.mgr_id and
department.head both refer to employee.id).  Use these definitions to
answer questions 5-10.  If you need to use any nonstandard functions or
syntax, be sure to name the DBMS that implements them.

employee                              department
----------------------------------    -----------------------
 id |        name        | mgr_id           name      | head
----+--------------------+--------    ----------------+------
  1 | Jonathan Archer    |     11      Operations     |   11
  2 | Christopher Pike   |     12      Marketing      |   12
  3 | James Kirk         |     13      IT             |   13
  4 | Jean-Luc Picard    |     14      HR             |   14
  5 | Kathryn Janeway    |     15      Sales          |   15
  6 | Ralph Wiggum       |     11
  7 | Troy McClure       |     12
  8 | Waylon Smithers    |     17
  9 | Edna Krabappel     |     16
 10 | Ned Flanders       |     15
 11 | Buffy Summers      |
 12 | Xander Harris      |
 13 | Willow Rosenberg   |
 14 | Rupert Giles       |
 15 | Oz Selbie          |
 16 | Dade Murphy        |     11
 17 | Kate Libby         |     13
 18 | Paul Cook          |     17
 19 | Emmanuel Goldstein |     16
 20 | Winston Smith      |     15
 21 | Thomas Anderson    |     15
 22 | Agent Smith        |     14
 23 | Malcolm Reynolds   |     14
 24 | River Tam          |     18
 25 | Jason Nesmith      |     18

5.  Write an SQL query to list the full name of every employee,
    alphabetized by first name.

--I am assuming Postgres SQL as the db.

SELECT name FROM employee ORDER BY name;

6.  Write an SQL query to list the full name of every employee,
    alphabetized by last name.

--I am assuming Postgres SQL as the db.

SELECT name FROM employee ORDER BY LTRIM(REVERSE(LEFT(REVERSE(name), STRPOS(REVERSE(name), ' '))));

7.  Write an SQL query to list the full name of every employee along
    with the full name of his/her manager.

--I am assuming Postgres SQL as the db.

SELECT employee.name AS EMPLOYEE_NAME, manager.name AS MANAGER_NAME FROM employee AS employee
    LEFT JOIN employee AS manager ON employee.mgr_id = manager.id;

8.  Write an SQL query to list the full name of every employee in the
    Sales department.

--I am assuming Postgres SQL as the db.
--This query works only for the Sales Department, because there are no multiple levels of reporting
--in Sales i.e., there is a Sales Head and all other Sales people directly report to him.

SELECT name FROM employee WHERE
    (mgr_id = (SELECT head from department WHERE name = 'Sales')) OR
    (id = (SELECT head from department WHERE name = 'Sales'));


9.  Write an SQL query to list the full name of every employee along
    with name of his/her department.

--I am assuming Postgres SQL as the db.

10. Is there a better design for a database that supports the queries
    described in questions 5-9?  If so, describe it.  If not, why not?

Yes, we can improve the database design by performing the following:
- Split First Name and Last Name of employee in to two columns.
- Add a primary key (department.id) for the department table and add
 a foreign key for the department.id in the employee table. This way the
 department of every employee is captured directly.


11. Write a function in the language of your choice that implements
    quicksort on an array of integers.

12. Write a function in the language of your choice that performs
    binary search on a sorted array of integers.

    // This function is written in C#. You can find the entire C# solution in the public github Repo

    /// <summary>
    /// This functions returns the location of the numToBeFound in the inputArray using Binary Search Algorithm
    /// If the numToBeFound does not exist in the inputArray, -1 will be returned.
    /// </summary>
    /// <param name="inputArray"> The input Array of integers </param>
    /// <param name="numToBeFound"> The number to be found in the inputArray </param>
    /// <returns> Location of the numToBeFound if it exists, -1 if it does not exist </returns>
    static int BinarySearch(int[] inputArray, int numToBeFound)
    {
        //Zero sized array
        if (inputArray.Length == 0)
            return -1;

        int left, right, middle;

        left = 0;
        right = inputArray.Length - 1;

        //Loop till you either find the number in the array or you complete the binary search.
        while (true)
        {
            middle = (left + right) / 2;

            //If the middle element in the inputArray matches, just return the index of the middle number
            if (numToBeFound == inputArray[middle])
                return middle;

            //We have finished the binary search. Stopping condition to prevent infinite loop
            if (left == middle)
            {
                //Edge case for right-most element in the inputArray
                //because the middle will never assume the value of the right-most element in the inputArray
                if (numToBeFound == inputArray[right])
                    return right;
                else
                    return -1;
            }

            if (numToBeFound < inputArray[middle])
            {
                //Search left half
                right = middle;
            }
            else
            {
                //Search right half
                left = middle;
            }
        }

    }

    // The above function was tested using the following values to cover all edge cases.
    //Zero sized array
    int[] input1 = new int[] { };
    Console.WriteLine(BinarySearch(input1, 1));

    //Array with one value
    int[] input2 = new int[] { 1 };
    Console.WriteLine(BinarySearch(input2, 1));
    Console.WriteLine(BinarySearch(input2, 3));

    //Array with two values
    int[] input3 = new int[] { 2, 5 };
    Console.WriteLine(BinarySearch(input3, 2));
    Console.WriteLine(BinarySearch(input3, 5));
    Console.WriteLine(BinarySearch(input3, 3));
    Console.WriteLine(BinarySearch(input3, 1));
    Console.WriteLine(BinarySearch(input3, 7));

    //Array with more than 2 values
    int[] input4 = new int[] { 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21 };
    Console.WriteLine(BinarySearch(input4, 1));
    Console.WriteLine(BinarySearch(input4, 9));
    Console.WriteLine(BinarySearch(input4, 4));
    Console.WriteLine(BinarySearch(input4, 25));
    Console.WriteLine(BinarySearch(input4, 21));
    Console.WriteLine(BinarySearch(input4, -3));

13. Write a function in the language of your choice performs the query
    you wrote for question 7, and outputs the results as an HTML table.



    /// <summary>
    /// A simple class to hold a (employee, manager) tuple
    /// </summary>
    class EmployeeManagerTuple
    {
        /// <summary>
        /// Employee name
        /// </summary>
        public string employee { get; set; }

        /// <summary>
        /// Manager name
        /// </summary>
        public string manager { get; set; }
    }

    /// <summary>
    /// Run the SQL query to retrieve the (employee, manager) tuple and display as a hml table.
    /// I am using a personal Postgres SQL server. Also I am using the Npgsql library to connect to the Postgres db.
    /// Documentation for this library can be found at: http://www.npgsql.org/doc/index.html
    /// </summary>
    static void RunSQLQueryAndDisplayHTMLTable() {
        using (var conn = new NpgsqlConnection("Host=XXXXXXX;Username=YYYYYYY;Password=ZZZZZZ;Database=starmobile-sandeep"))
        {
            conn.Open();
            using (var cmd = new NpgsqlCommand())
            {
                cmd.Connection = conn;

                // The SQL command to retrieve the (employee, manager) tuple
                cmd.CommandText = "SELECT employee.name AS EMPLOYEE_NAME, manager.name AS MANAGER_NAME FROM employee AS employee LEFT JOIN employee AS manager ON employee.mgr_id = manager.id;";

                // Create a list of all retrieved (employee, manager) tuples
                using (var reader = cmd.ExecuteReader())
                {
                    var employeeManagerTupleList = new List<EmployeeManagerTuple>();
                    while (reader.Read())
                    {
                        var tuple = new EmployeeManagerTuple();
                        try
                        {
                            tuple.employee = reader.GetString(0);
                            tuple.manager = reader.GetString(1);
                        }
                        catch { }
                        employeeManagerTupleList.Add(tuple);
                    }

                    //Convert the list into html table and display.
                    DisplayHtmlTable(employeeManagerTupleList);
                }
            }
        }
    }

    /// <summary>
    /// Convert the list of (employee,manager) tuples to an html table and display it.
    /// Used documentation for the HtmlTable from: https://msdn.microsoft.com/en-us/library/system.web.ui.htmlcontrols.htmltable(v=vs.110).aspx
    ///
    /// </summary>
    /// <param name="employeeManagerTupleList"> The list of (employee, manager) tuples </param>
    static void DisplayHtmlTable(List<EmployeeManagerTuple> employeeManagerTupleList)
    {
        var table = new HtmlTable();
        foreach (var tuple in employeeManagerTupleList)
        {
            var row = new HtmlTableRow();
            var cell0 = new HtmlTableCell();
            cell0.InnerText = tuple.employee;
            var cell1 = new HtmlTableCell();
            cell1.InnerText = tuple.manager;
            row.Cells.Add(cell0);
            row.Cells.Add(cell1);
            table.Rows.Add(row);
        }

        StringWriter stringWriter = new StringWriter();
        table.RenderControl(new System.Web.UI.HtmlTextWriter(stringWriter));
        Console.WriteLine(stringWriter.ToString());

    }



14. Write a program in the language of your choice that takes a filename
    and a number N as arguments and retrieves and outputs the Nth line
    from the file.

    //This function is written in C#. The complete solution can be found in the github Repo

    /// <summary>
    /// Function to read a file and display the Nth line
    /// </summary>
    /// <param name="pathToFile"> The path to the file </param>
    /// <param name="number"> The number of line that needs to be displayed </param>
    static void FileReadAndOutputNthLine(string pathToFile, int number) {
        if (number < 0)
        {
            Console.WriteLine("Error: Cannot display line with negative line number");
            return;
        }
        if (String.IsNullOrEmpty(pathToFile))
        {
            Console.WriteLine("Error: The path to file is empty");
            return;
        }

        try
        {
            int counter = 0;
            string line;

            //Read file from the path and read one line at a time
            System.IO.StreamReader fileToRead = new System.IO.StreamReader(pathToFile);
            while((line = fileToRead.ReadLine()) != null)
            {
                //If we have reached the required line display and return
                if (number == (counter+1))
                {
                    System.Console.WriteLine(line);
                    return;
                }
                counter++;
            }

            Console.WriteLine("Error: The input file has less than " + number + " of lines");

        }
        catch (Exception e)
        {
            Console.WriteLine("Error: Exception while reading the file. Exception message - " + e.Message);
        }

    }


15. Write the function from question 12 in a different language.
16. Write the program from question 14 in a different language (it can
    be the same language you used for #15, but it doesn't have to be).
