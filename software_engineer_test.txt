Basic Rules
===========
1. Review the questions in this file. Reply back via email with an estimated
   delivery date.
2. Answer each of the questions below.
3. Add your answer to each question to this file, in-line.
4. Send the final file back for review.
5. Bonus points if you add this initial file to your public git repo and share
   that repo with us so we can see how your answers progressed.
6. You may use external sources to help answer the questions (i.e. Google, etc),
   but you should always cite your sources in your comments. Learning from
   others is good. Plagiarism is bad.


Developer Test
==============

1.  What editor will you use to edit this file, and why?

Atom. This is my default file editor. It is one of the best cross platform editors
and provides syntax highlighting for most programming languages.

2.  Some of the questions will ask for a solution in the language of
    your choice.  What language(s) will you choose, and why?

C#. This is my favorite programming language. It is a general purpose OOPS language
and is very easy to use.

I used Objective-C for question 15. I am very familiar with this language.
I used awk for question 16 as it provides a single line command-line utility for the question.

3.  Explain the difference between testing and debugging.

Software testing is used to identify if the software/program under test is working as expected for
given inputs. Testing will only tell us whether something is working or not. It will not tell us why some test is
failing. There are several types of testing like unit testing, functional testing, blackbox testing,
performance testing, scalability testing etc that are used to test different aspects of the software.

Debugging is used to identify the root cause of a single bug or issue. Various IDEs for programming languages
such as Visual Studio, Eclipse, Xcode etc provide tools for debugging. We can step through each line of code
as the program is running or set breakpoints in the code and let the program run till the breakpoint is reached.
While debugging, we can watch the values of various variables that are currently in scope of the run.

4.  Consider a user querying a search engine.  Describe, in as much
    detail as you like, what happens between the user clicking the
    "submit" button and the display of the results.

I am assuming DNS querying is already complete because the search engine URL is already loaded in the browser.
When the user enters a text and clicks on the Submit button the following events happen:
- The Operating System (OS) on the user's device understands the raw mouse click on the "Submit" button.
- The OS sends the raw mouse click at a raw screen co-ordinate to the browser
- The browser converts raw screen co-ordinate in to a button click DOM event.
- The DOM event triggers the javascript for the button.
- The javascript in the page makes a POST operation on the search engine URL with the text entered in the search field.
- The POST operation is converted in the http packets.
- The http packets are converted to TCP packets.
- The TCP packets are converted to IP packets.
- The IP packets are sent over the Internet via BGP routing to the eventual server hosting the Search engine.
There are other layers of the networking stack such as Medium access layer and Physical layer that aid in moving
the packets from the users device to the hosting server. Also this process could include Wifi/WWAN, Internet Service Provider,
Internet gateways, CDNs, firewalls, etc.
- Once the IP packets reach the hosting server, they are re-assembled to TCP, and eventually http packets and
sent to the server.
- The hosting server understands the POST query.
- The hosting server will run the "Search" query in its application database. The Search engine has an indexed view of
the public Internet. The indexed view is created using a web crawler and various search terms are used as indexes. The index
is similar to a (key, value) pair where the key is the index, and the values are the URLs for the indexes. The data structure
will be much more complex than a simple (key, value) hashmap.
- The hosting server will retrieve the URLs and the page snippets for pages that are relevant to the "Search" text.
- The first 10-20 search results are combined into a single page view.
- Relevant Ads for the Search query are also retrieved.
- Also links for more search results are place in the bottom of the page.
- The ads are combined with the search results, and a single page of html with javascript is created. The html includes
all the miscellaneous items in the page such as logos, CSS, links to additional items, images results (if any), video results (if any),
news results (if any) etc.
- The resulting html page is sent as a response to the original POST request.
- The POST response again follows the same network stack including http, TCP, IP, MAC, Physical Layers.
- The html page reaches the browser.
- The browser converts the html page in to the DOM tree.
- The DOM tree is rendered on the browser.
- The browser sends the pixel information to the OS on the user's device.
- The OS renders the pixels.


The two tables below describe relationships between employees,
managers, and departments (the columns employee.mgr_id and
department.head both refer to employee.id).  Use these definitions to
answer questions 5-10.  If you need to use any nonstandard functions or
syntax, be sure to name the DBMS that implements them.

employee                              department
----------------------------------    -----------------------
 id |        name        | mgr_id           name      | head
----+--------------------+--------    ----------------+------
  1 | Jonathan Archer    |     11      Operations     |   11
  2 | Christopher Pike   |     12      Marketing      |   12
  3 | James Kirk         |     13      IT             |   13
  4 | Jean-Luc Picard    |     14      HR             |   14
  5 | Kathryn Janeway    |     15      Sales          |   15
  6 | Ralph Wiggum       |     11
  7 | Troy McClure       |     12
  8 | Waylon Smithers    |     17
  9 | Edna Krabappel     |     16
 10 | Ned Flanders       |     15
 11 | Buffy Summers      |
 12 | Xander Harris      |
 13 | Willow Rosenberg   |
 14 | Rupert Giles       |
 15 | Oz Selbie          |
 16 | Dade Murphy        |     11
 17 | Kate Libby         |     13
 18 | Paul Cook          |     17
 19 | Emmanuel Goldstein |     16
 20 | Winston Smith      |     15
 21 | Thomas Anderson    |     15
 22 | Agent Smith        |     14
 23 | Malcolm Reynolds   |     14
 24 | River Tam          |     18
 25 | Jason Nesmith      |     18

5.  Write an SQL query to list the full name of every employee,
    alphabetized by first name.

--I am assuming Postgres SQL as the db.

SELECT name FROM employee ORDER BY name;

6.  Write an SQL query to list the full name of every employee,
    alphabetized by last name.

--I am assuming Postgres SQL as the db.
--Basically trim the name for the lastName and order by it

SELECT name FROM employee ORDER BY LTRIM(REVERSE(LEFT(REVERSE(name), STRPOS(REVERSE(name), ' '))));

7.  Write an SQL query to list the full name of every employee along
    with the full name of his/her manager.

--I am assuming Postgres SQL as the db.

SELECT employee.name AS EMPLOYEE_NAME, manager.name AS MANAGER_NAME FROM employee AS employee
    LEFT JOIN employee AS manager ON employee.mgr_id = manager.id;

8.  Write an SQL query to list the full name of every employee in the
    Sales department.

--I am assuming Postgres SQL as the db.
--This query works only for the Sales Department, because there are no multiple levels of reporting
--in Sales i.e., there is a Sales Head and all other Sales people directly report to him.

SELECT name FROM employee WHERE
    (mgr_id = (SELECT head from department WHERE name = 'Sales')) OR
    (id = (SELECT head from department WHERE name = 'Sales'));


9.  Write an SQL query to list the full name of every employee along
    with name of his/her department.

--I am assuming Postgres SQL as the db.
--I am using CTE for creating a temporary table.
--I used the examples in this MSDN documentation for reference: https://technet.microsoft.com/en-us/library/ms186243(v=sql.105).aspx


--Recursive Common Table Expression (CTE)
WITH RECURSIVE EmployeeList AS
	--Anchor query
	(SELECT manager.id, manager.name, manager.mgr_id,
	department.name AS deptName
	FROM employee AS manager
	INNER JOIN department
	ON department.head = manager.id
	WHERE manager.mgr_id IS NULL

	UNION ALL

	--Recursive query
	SELECT Emp.id, Emp.name, Emp.mgr_id,
	EL.deptName
	FROM employee AS Emp
	--Recursively use the temporary EmployeeList table
	INNER JOIN EmployeeList AS EL
	ON Emp.mgr_id = El.id
	--Stopping condition for the recursion
	WHERE Emp.mgr_id IS NOT NULL)
SELECT name, deptname FROM EmployeeList ORDER BY deptname;


10. Is there a better design for a database that supports the queries
    described in questions 5-9?  If so, describe it.  If not, why not?

Yes, we can improve the database design by performing the following:
- Split First Name and Last Name of employee in to two columns.
- Add a primary key (department.id) for the department table and add
 a foreign key for the department.id in the employee table. This way the
 department of every employee is captured directly.


11. Write a function in the language of your choice that implements
    quicksort on an array of integers.

    //I used C# for this question. I basically implemented the Lumoto Partition Scheme
    //for QuickSort as described in this wikipedia entry: https://en.wikipedia.org/wiki/Quicksort
    //The complete code for the QuickSort solution with Unit tests can be found in the
    //github repo at: https://github.com/ksandeep23/achieveIt

    /// <summary>
    /// The Recursive QuickSort function. Implement the Lomuto QuickSort algorithm
    /// from the Wikipedia entry in the following URL: https://en.wikipedia.org/wiki/Quicksort
    /// </summary>
    /// <param name="inputArray"> inputArray </param>
    /// <param name="lo"> The low index </param>
    /// <param name="hi"> The high index </param>
    static void QuickSort(int[] inputArray, int lo, int hi)
    {
        if (lo < hi)
        {
            int p = partition(inputArray, lo, hi);
            QuickSort(inputArray, lo, p - 1);
            QuickSort(inputArray, p + 1, hi);
        }
    }

    /// <summary>
    /// Partition the array
    /// </summary>
    /// <param name="inputArray"> Input array </param>
    /// <param name="lo"> The low index </param>
    /// <param name="hi"> The high index </param>
    /// <returns></returns>
    static int partition(int[] inputArray, int lo, int hi)
    {
        //Pivot
        int pivot = inputArray[hi];
        int i = lo;
        for (int j = lo; j < hi; j++)
        {
            if (inputArray[j] <= pivot)
            {
                //Swap inputArray[i] and inputArray[j]
                int temp = inputArray[i];
                inputArray[i] = inputArray[j];
                inputArray[j] = temp;
                i++;
            }
        }

        //Swap inputArray[i] and iputArray[hi]
        int temp1 = inputArray[i];
        inputArray[i] = inputArray[hi];
        inputArray[hi] = temp1;

        return i;

    }


12. Write a function in the language of your choice that performs
    binary search on a sorted array of integers.

    // This function is written in C#.
    // You can find the entire C# solution in the public github Repo: https://github.com/ksandeep23/achieveIt
    // This function was unit tested with various inputs. Please see the full solution for the unit tests.

    /// <summary>
    /// This functions returns the location of the numToBeFound in the inputArray using Binary Search Algorithm
    /// If the numToBeFound does not exist in the inputArray, -1 will be returned.
    /// </summary>
    /// <param name="inputArray"> The input Array of integers </param>
    /// <param name="numToBeFound"> The number to be found in the inputArray </param>
    /// <returns> Location of the numToBeFound if it exists, -1 if it does not exist </returns>
    static int BinarySearch(int[] inputArray, int numToBeFound)
    {
        //Zero sized array
        if (inputArray.Length == 0)
            return -1;

        int left, right, middle;

        left = 0;
        right = inputArray.Length - 1;

        //Loop till you either find the number in the array or you complete the binary search.
        while (true)
        {
            middle = (left + right) / 2;

            //If the middle element in the inputArray matches, just return the index of the middle number
            if (numToBeFound == inputArray[middle])
                return middle;

            //We have finished the binary search. Stopping condition to prevent infinite loop
            if (left == middle)
            {
                //Edge case for right-most element in the inputArray
                //because the middle will never assume the value of the right-most element in the inputArray
                if (numToBeFound == inputArray[right])
                    return right;
                else
                    return -1;
            }

            if (numToBeFound < inputArray[middle])
            {
                //Search left half
                right = middle;
            }
            else
            {
                //Search right half
                left = middle;
            }
        }

    }


13. Write a function in the language of your choice performs the query
    you wrote for question 7, and outputs the results as an HTML table.

    // I am assuming a Postgres db.
    // You can find the entire C# solution in the public github Repo: https://github.com/ksandeep23/achieveIt
    // I am using a direct SQL query here to simplify the answer. In real project, we
    // should ideally use Entity framework with LINQ.
    // The output of the program is copied in a txt file Output.txt and is placed in the source code directory.
    // I have removed references to my personal Postgres db because it cannot be accessed from public Internet.

    /// <summary>
    /// A simple class to hold a (employee, manager) tuple
    /// </summary>
    class EmployeeManagerTuple
    {
        /// <summary>
        /// Employee name
        /// </summary>
        public string employee { get; set; }

        /// <summary>
        /// Manager name
        /// </summary>
        public string manager { get; set; }
    }

    /// <summary>
    /// Run the SQL query to retrieve the (employee, manager) tuple and display as a html table.
    /// I am using a personal Postgres SQL server. Also I am using the Npgsql library to connect to the Postgres db.
    /// Documentation for this library can be found at: http://www.npgsql.org/doc/index.html
    /// I have removed references to my personal Postgres db because it is a local one.
    /// </summary>
    static void RunSQLQueryAndDisplayHTMLTable() {
        using (var conn = new NpgsqlConnection("Host=XXXXXXX;Username=YYYYYYY;Password=ZZZZZZ;Database=DDDDDDDD"))
        {
            conn.Open();
            using (var cmd = new NpgsqlCommand())
            {
                cmd.Connection = conn;

                // The SQL command to retrieve the (employee, manager) tuple
                cmd.CommandText = "SELECT employee.name AS EMPLOYEE_NAME, manager.name AS MANAGER_NAME FROM employee AS employee LEFT JOIN employee AS manager ON employee.mgr_id = manager.id;";

                // Create a list of all retrieved (employee, manager) tuples
                using (var reader = cmd.ExecuteReader())
                {
                    var employeeManagerTupleList = new List<EmployeeManagerTuple>();
                    while (reader.Read())
                    {
                        var tuple = new EmployeeManagerTuple();
                        try
                        {
                            tuple.employee = reader.GetString(0);
                            tuple.manager = reader.GetString(1);
                        }
                        catch { }
                        employeeManagerTupleList.Add(tuple);
                    }

                    //Convert the list into html table and display.
                    DisplayHtmlTable(employeeManagerTupleList);
                }
            }
        }
    }

    /// <summary>
    /// Convert the list of (employee,manager) tuples to an html table and display it.
    /// Used documentation for the HtmlTable from: https://msdn.microsoft.com/en-us/library/system.web.ui.htmlcontrols.htmltable(v=vs.110).aspx
    ///
    /// </summary>
    /// <param name="employeeManagerTupleList"> The list of (employee, manager) tuples </param>
    static void DisplayHtmlTable(List<EmployeeManagerTuple> employeeManagerTupleList)
    {
        var table = new HtmlTable();
        foreach (var tuple in employeeManagerTupleList)
        {
            var row = new HtmlTableRow();
            var cell0 = new HtmlTableCell();
            cell0.InnerText = tuple.employee;
            var cell1 = new HtmlTableCell();
            cell1.InnerText = tuple.manager;
            row.Cells.Add(cell0);
            row.Cells.Add(cell1);
            table.Rows.Add(row);
        }

        //Convert the html table in to string
        StringWriter stringWriter = new StringWriter();
        table.RenderControl(new System.Web.UI.HtmlTextWriter(stringWriter));
        Console.WriteLine(stringWriter.ToString());

    }





14. Write a program in the language of your choice that takes a filename
    and a number N as arguments and retrieves and outputs the Nth line
    from the file.

    //This function is written in C#.
    // You can find the entire C# solution in the public github Repo: https://github.com/ksandeep23/achieveIt
    //I am adding a number of error messages. This could be an overkill for a simple question.
    //Please see the answer for question 16 for a one line command using awk to do the same thing.

    /// <summary>
    /// Function to read a file and display the Nth line
    /// </summary>
    /// <param name="pathToFile"> The path to the file </param>
    /// <param name="number"> The number of line that needs to be displayed </param>
    static void FileReadAndOutputNthLine(string pathToFile, int number) {
        if (number < 0)
        {
            Console.WriteLine("Error: Cannot display line with negative line number");
            return;
        }
        if (String.IsNullOrEmpty(pathToFile))
        {
            Console.WriteLine("Error: The path to file is empty");
            return;
        }

        try
        {
            int counter = 0;
            string line;

            //Read file from the path and read one line at a time
            System.IO.StreamReader fileToRead = new System.IO.StreamReader(pathToFile);
            while((line = fileToRead.ReadLine()) != null)
            {
                //If we have reached the required line display and return
                if (number == (counter+1))
                {
                    System.Console.WriteLine(line);
                    return;
                }
                counter++;
            }

            Console.WriteLine("Error: The input file has less than " + number + " of lines");

        }
        catch (Exception e)
        {
            Console.WriteLine("Error: Exception while reading the file. Exception message - " + e.Message);
        }

    }


15. Write the function from question 12 in a different language.
  //I am using Objective-C for this question. I am just translating the function in
  //question12 to Objective-C. So there is no Objective-C project in the github Repo

  /** This functions returns the location of the numToBeFound in the inputArray using Binary Search Algorithm
  * If the numToBeFound does not exist in the inputArray, -1 will be returned.
  *
  * @param inputArray The input Array of integers
  * @param numToBeFound The number to be found in the inputArray
  * @returns: Location of the numToBeFound if it exists, -1 if it does not exist
  */
  + (int) BinarySearch:(NSArray *) inputArray forNumToBeFound:(int)numToBeFound
  {
      //Zero sized array
      if ([inputArray count] == 0)
          return -1;

      int left, right, middle;

      left = 0;
      right = inputArray.Length - 1;

      //Loop till you either find the number in the array or you complete the binary search.
      while (true)
      {
          middle = (left + right) / 2;

          //If the middle element in the inputArray matches, just return the index of the middle number
          if (numToBeFound == (int)inputArray[middle])
              return middle;

          //We have finished the binary search. Stopping condition to prevent infinite loop
          if (left == middle)
          {
              //Edge case for right-most element in the inputArray
              //because the middle will never assume the value of the right-most element in the inputArray
              if (numToBeFound == (int)inputArray[right])
                  return right;
              else
                  return -1;
          }

          if (numToBeFound < (int)inputArray[middle])
          {
              //Search left half
              right = middle;
          }
          else
          {
              //Search right half
              left = middle;
          }
      }

  }


16. Write the program from question 14 in a different language (it can
    be the same language you used for #15, but it doesn't have to be).

//Here is a simple awk command line to perform this. You can run this on any Linux/Mac command shell.
//Replace Hello.txt with the path to the actual file.
//Replace 3 with the value for N
$ cat Hello.txt | awk NR==3
